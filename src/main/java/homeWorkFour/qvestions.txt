1)  Почему использование тестовых заглушек может быть полезным при написании модульных тестов?
 Unit-тесты тестируют каждый кусок(модуль) логики приложения , чтобы в будущем избежать проблем.
 Модули в свою очередь  взаимосвязаны между собой и зависят друг от друга.
 Чтобы их условно "разъединить" создается заглушка, чтобы дальше протестировать модули по отдельности.

 2) Какой тип тестовой заглушки следует использовать, если вам нужно проверить, что метод был вызван с определенными аргументами?
Заглушки  Моки! Ими можно управлять так, как нужно в конкретном тесте.
 Не нужно подгонять состояние системы для конкретного случая,
  а просто нужно настроить  заглушку на возвращение нужного значения при вызове определенного метода и все.
 При этом состояние всей системы  не изменяется — она ничего не записывает , не передает по сети, не пересчитывает массивы данных,
 не лезет в другие сервисы. Просто заглушка и возвращаемое значение.

 3) Какой тип тестовой заглушки следует использовать, если вам просто нужно вернуть определенное значение или исключение в ответ на вызов метода?
Фейл- это реализация, которая выдает себя за действительный объект, но не является "реальной". Цель Фейка не в том, чтобы повлиять на поведение тестируемой системы,
а в том, чтобы упростить реализацию теста (удалив ненужные или тяжелые зависимости)

4) Какой тип тестовой заглушки вы бы использовали для имитации  взаимодействия с внешним API или базой данных?
Mock-объекты  могут быть использованы для имитации взаимодействия с внешним API или базой данных.
Например, если  код взаимодействует с API для получения данных, можно создать Mock-объект, который имитирует ответы от этого API.
